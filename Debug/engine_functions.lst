SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 08-Jun-2023 15:50:06  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\Ceddy D\Documents\CASIO\fx-9860G SDK\ENGINE\engine_functions.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      engine_fun     1    #include "engine_functions.h"
      engine_fun     2    
      engine_fun     3    
      engine_fun     4    void Init_Sprite(Sprite *outputSprite, int *inputSprite)
P   00000000              _Init_Sprite:                    ; function: Init_Sprite
                                                           ; frame size=0
      engine_fun     5    {
      engine_fun     6            int size;
      engine_fun     7            int i;
      engine_fun     8            
      engine_fun     9            // Gets total byte size of template.
      engine_fun    10            size = sizeof(inputSprite) / sizeof(inputSprite[0]);
      engine_fun    11            
      engine_fun    12            // Gets X and Y size of output sprite.
      engine_fun    13            outputSprite->xMax = inputSprite[0];
    00000000 6352                   MOV.L       @R5,R3
      engine_fun    14            outputSprite->yMax = inputSprite[1];
      engine_fun    15            
      engine_fun    16            // Shifts data of the sprite 2 places to the left.
      engine_fun    17            for (i = 0; i < size; i++) inputSprite[i] = inputSprite[i+2];
    00000002 E700                   MOV         #0,R7
    00000004 1431                   MOV.L       R3,@(4,R4)
    00000006 E600                   MOV         #0,R6
    00000008 5251                   MOV.L       @(4,R5),R2
    0000000A E001                   MOV         #1,R0
    0000000C 1422                   MOV.L       R2,@(8,R4)
    0000000E 365C                   ADD         R5,R6
    00000010              L265:                             
    00000010 5362                   MOV.L       @(8,R6),R3
    00000012 7701                   ADD         #1,R7
    00000014 2632                   MOV.L       R3,@R6
    00000016 3703                   CMP/GE      R0,R7
    00000018 8FFA                   BF/S        L265
    0000001A 7604                   ADD         #4,R6
      engine_fun    18            
      engine_fun    19            // Points output sprite to input sprite.
      engine_fun    20            outputSprite->data = inputSprite;
      engine_fun    21    }
    0000001C 000B                   RTS
    0000001E 2452                   MOV.L       R5,@R4
      engine_fun    22    
      engine_fun    23    
      engine_fun    24    void Draw_Sprite_Scale(int x, int y, Sprite sprite, int scaleX, int scaleY, Camera camera)
    00000020              _Draw_Sprite_Scale:              ; function: Draw_Sprite_Scale
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __divls
    00000020 2FE6                   MOV.L       R14,@-R15
    00000022 2FD6                   MOV.L       R13,@-R15
    00000024 2FC6                   MOV.L       R12,@-R15
    00000026 2FB6                   MOV.L       R11,@-R15
    00000028 2FA6                   MOV.L       R10,@-R15
    0000002A 2F96                   MOV.L       R9,@-R15
    0000002C 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 08-Jun-2023 15:50:06  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002E 4F22                   STS.L       PR,@-R15
    00000030 4F12                   STS.L       MACL,@-R15
    00000032 7FF0                   ADD         #-16,R15
      engine_fun    25    {
      engine_fun    26            // Scaled X and Y size of sprite.
      engine_fun    27            int scaledXMax = sprite.xMax*scaleX/100 * camera.scale/100;
    00000034 D33C                   MOV.L       L271,R3    ; __divls
    00000036 6CF3                   MOV         R15,R12
    00000038 1F43                   MOV.L       R4,@(12,R15)
    0000003A 6EF3                   MOV         R15,R14
    0000003C 1F51                   MOV.L       R5,@(4,R15)
    0000003E E464                   MOV         #100,R4
    00000040 7C40                   ADD         #64,R12
    00000042 7E34                   ADD         #52,R14
    00000044 51E1                   MOV.L       @(4,R14),R1
    00000046 0167                   MUL.L       R6,R1
    00000048 011A                   STS         MACL,R1
    0000004A 430B                   JSR         @R3
    0000004C 6043                   MOV         R4,R0
    0000004E 55C2                   MOV.L       @(8,R12),R5
    00000050 D335                   MOV.L       L271,R3    ; __divls
    00000052 0057                   MUL.L       R5,R0
    00000054 011A                   STS         MACL,R1
    00000056 430B                   JSR         @R3
    00000058 6043                   MOV         R4,R0
    0000005A 2F02                   MOV.L       R0,@R15
      engine_fun    28            int scaledYMax = sprite.yMax*scaleY/100 * camera.scale/100;
    0000005C 51E2                   MOV.L       @(8,R14),R1
    0000005E 0177                   MUL.L       R7,R1
    00000060 D331                   MOV.L       L271,R3    ; __divls
    00000062 011A                   STS         MACL,R1
    00000064 430B                   JSR         @R3
    00000066 6043                   MOV         R4,R0
    00000068 0057                   MUL.L       R5,R0
    0000006A 011A                   STS         MACL,R1
    0000006C D32E                   MOV.L       L271,R3    ; __divls
    0000006E 430B                   JSR         @R3
    00000070 6043                   MOV         R4,R0
    00000072 6A03                   MOV         R0,R10
      engine_fun    29            int i, j;
      engine_fun    30            int a, b;
      engine_fun    31            
      engine_fun    32            // For every point on the scaled sprite, draw the correct color.
      engine_fun    33            for (i = 0; i < scaledXMax; i++)
    00000074 A02F                   BRA         L266
    00000076 EB00                   MOV         #0,R11
    00000078              L267:                             
    00000078 53F3                   MOV.L       @(12,R15),R3
      engine_fun    34            {
      engine_fun    35                    for (j = 0; j < scaledYMax; j++)
    0000007A 4A15                   CMP/PL      R10
    0000007C ED00                   MOV         #0,R13
    0000007E 33BC                   ADD         R11,R3
    00000080 8F28                   BF/S        L268
    00000082 1F32                   MOV.L       R3,@(8,R15)
    00000084              L269:                             
      engine_fun    36                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 08-Jun-2023 15:50:06  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      engine_fun    37                            
      engine_fun    38                            a = (i * sprite.xMax) / scaledXMax + 2;                         // ( To avoid havi
                         +ng to type the same equation over and over.
    00000084 54E1                   MOV.L       @(4,R14),R4
    00000086 0B47                   MUL.L       R4,R11
    00000088 D327                   MOV.L       L271,R3    ; __divls
    0000008A 011A                   STS         MACL,R1
    0000008C 430B                   JSR         @R3
    0000008E 60F2                   MOV.L       @R15,R0
      engine_fun    39                            b = (j * sprite.xMax) / scaledYMax * sprite.xMax;                       // I'm uns
                         +ure how much time this actually saves. :P )
    00000090 0D47                   MUL.L       R4,R13
    00000092 6903                   MOV         R0,R9
    00000094 D324                   MOV.L       L271,R3    ; __divls
    00000096 011A                   STS         MACL,R1
    00000098 7902                   ADD         #2,R9
    0000009A 430B                   JSR         @R3
    0000009C 60A3                   MOV         R10,R0
    0000009E 0047                   MUL.L       R4,R0
      engine_fun    40                            
      engine_fun    41                            if (sprite.data[a + b] != 3) Bdisp_SetPoint_VRAM(x+i+camera.x, y+j+camera.y, sprit
                         +e.data[a + b]);
    000000A0 63E2                   MOV.L       @R14,R3
    000000A2 6093                   MOV         R9,R0
    000000A4 081A                   STS         MACL,R8
    000000A6 308C                   ADD         R8,R0
    000000A8 4008                   SHLL2       R0
    000000AA 003E                   MOV.L       @(R0,R3),R0
    000000AC 8803                   CMP/EQ      #3,R0
    000000AE 890E                   BT          L270
    000000B0 60E2                   MOV.L       @R14,R0
    000000B2 6693                   MOV         R9,R6
    000000B4 55F1                   MOV.L       @(4,R15),R5
    000000B6 368C                   ADD         R8,R6
    000000B8 53C1                   MOV.L       @(4,R12),R3
    000000BA 35DC                   ADD         R13,R5
    000000BC 54F2                   MOV.L       @(8,R15),R4
    000000BE 4608                   SHLL2       R6
    000000C0 066E                   MOV.L       @(R0,R6),R6
    000000C2 353C                   ADD         R3,R5
    000000C4 63C2                   MOV.L       @R12,R3
    000000C6 343C                   ADD         R3,R4
    000000C8 D318                   MOV.L       L271+4,R3  ; _Bdisp_SetPoint_VRAM
    000000CA 430B                   JSR         @R3
    000000CC 0009                   NOP
    000000CE              L270:                             
    000000CE 7D01                   ADD         #1,R13
    000000D0 3DA3                   CMP/GE      R10,R13
    000000D2 8BD7                   BF          L269
    000000D4              L268:                             
    000000D4 7B01                   ADD         #1,R11
    000000D6              L266:                             
    000000D6 63F2                   MOV.L       @R15,R3
    000000D8 3B33                   CMP/GE      R3,R11
    000000DA 8BCD                   BF          L267
      engine_fun    42                    }
      engine_fun    43            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 08-Jun-2023 15:50:06  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      engine_fun    44    }
    000000DC 7F10                   ADD         #16,R15
    000000DE 4F16                   LDS.L       @R15+,MACL
    000000E0 4F26                   LDS.L       @R15+,PR
    000000E2 68F6                   MOV.L       @R15+,R8
    000000E4 69F6                   MOV.L       @R15+,R9
    000000E6 6AF6                   MOV.L       @R15+,R10
    000000E8 6BF6                   MOV.L       @R15+,R11
    000000EA 6CF6                   MOV.L       @R15+,R12
    000000EC 6DF6                   MOV.L       @R15+,R13
    000000EE 000B                   RTS
    000000F0 6EF6                   MOV.L       @R15+,R14
      engine_fun    45    
      engine_fun    46    
      engine_fun    47    void Draw_Sprite(int x, int y, Sprite sprite)
    000000F2              _Draw_Sprite:                    ; function: Draw_Sprite
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    000000F2 4F22                   STS.L       PR,@-R15
      engine_fun    48    {
      engine_fun    49            Camera c = {0,0,100};
    000000F4 D20E                   MOV.L       L271+8,R2  ; L262
    000000F6 7FF4                   ADD         #-12,R15
    000000F8 D30E                   MOV.L       L271+12,R3 ; __quick_odd_mvn
    000000FA 61F3                   MOV         R15,R1
    000000FC 430B                   JSR         @R3
    000000FE E00C                   MOV         #12,R0
      engine_fun    50            Draw_Sprite_Scale(x, y, sprite, 100, 100, c);   // Draws the sprite normally.
    00000100 D30C                   MOV.L       L271+12,R3 ; __quick_odd_mvn
    00000102 62F3                   MOV         R15,R2
    00000104 E00C                   MOV         #12,R0
    00000106 3F08                   SUB         R0,R15
    00000108 430B                   JSR         @R3
    0000010A 61F3                   MOV         R15,R1
    0000010C D309                   MOV.L       L271+12,R3 ; __quick_odd_mvn
    0000010E 62F3                   MOV         R15,R2
    00000110 721C                   ADD         #28,R2
    00000112 E00C                   MOV         #12,R0
    00000114 3F08                   SUB         R0,R15
    00000116 430B                   JSR         @R3
    00000118 61F3                   MOV         R15,R1
    0000011A E764                   MOV         #100,R7
    0000011C BF80                   BSR         _Draw_Sprite_Scale
    0000011E 6673                   MOV         R7,R6
      engine_fun    51    }
    00000120 7F24                   ADD         #36,R15
    00000122 4F26                   LDS.L       @R15+,PR
    00000124 000B                   RTS
    00000126 0009                   NOP
    00000128              L271:                             
    00000128 <00000000>             .DATA.L     __divls
    0000012C <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000130 <00000000>             .DATA.L     L262
    00000134 <00000000>             .DATA.L     __quick_odd_mvn
C   00000000              L262:
    00000000 0000000000             .DATA.L     H'00000000,H'00000000,H'00000064




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 08-Jun-2023 15:50:06  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0064         



























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 08-Jun-2023 15:50:06  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       51



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000138 Byte(s)
CONSTANT SECTION (C):                               0000000C Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000144 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            3
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            14






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\CEDDYD~1\AppData\Local\Temp\hmk9C43.tmp 

